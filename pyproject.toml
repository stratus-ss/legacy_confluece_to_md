[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "confluence-downloader"
version = "0.1.0"
description = "Download and export content from Confluence servers, with future PDF-to-markdown conversion capabilities"
readme = "README.md"
license = { text = "MIT" }
authors = [
    { name = "Confluence Downloader Team", email = "team@example.com" }
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
requires-python = ">=3.9"
dependencies = [
    "requests>=2.25.0",
    "urllib3>=1.26.0",
    "python-dotenv>=0.19.0",
]

[project.optional-dependencies]
dev = [
    "black>=22.0.0",
    "flake8>=4.0.0",
    "mypy>=1.0.0",
    "pytest>=6.0.0",
    "pytest-mock>=3.6.0",
    "pytest-cov>=3.0.0",
    "responses>=0.18.0",
    "types-requests>=2.25.0",
]
test = [
    "pytest>=6.0.0",
    "pytest-mock>=3.6.0",
    "pytest-cov>=3.0.0",
    "responses>=0.18.0",
]

[project.scripts]
confluence-downloader = "main:main"

[project.urls]
"Homepage" = "https://github.com/yourusername/confluence-downloader"
"Bug Tracker" = "https://github.com/yourusername/confluence-downloader/issues"


[tool.setuptools]
packages = ["modules"]
include-package-data = true

[tool.setuptools.package-data]
modules = ["*.yaml", "*.yml", "*.json", "py.typed"]

[tool.black]
line-length = 120
target-version = ['py38', 'py39', 'py310', 'py311', 'py312', 'py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | \.pytest_cache
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.flake8]
max-line-length = 120
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    ".pytest_cache",
    "build",
    "dist",
    "*.egg-info",
    "venv",
    ".venv"
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--cov=modules",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=60"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests requiring cluster access",
    "unit: marks tests as unit tests (default)",
]

[tool.coverage.run]
source = ["modules"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.mypy]
python_version = "3.9"
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = false
warn_unused_ignores = false
warn_no_return = false
warn_unreachable = false
strict_equality = false
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "responses.*",
    "modules.downloader",
]
ignore_missing_imports = true
disable_error_code = ["arg-type"]

[tool.isort]
profile = "black"
line_length = 120
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
